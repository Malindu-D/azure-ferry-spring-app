package com.example.springexportapp.service;

import com.azure.communication.email.EmailClient;
import com.azure.communication.email.models.*;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.polling.PollResponse;
import com.example.springexportapp.model.DataExportRequest;
import com.example.springexportapp.model.ExportData;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class EmailService {

    private final EmailClient emailClient;
    
    @Value("${azure.communication.email.sender-address}")
    private String senderAddress;

    /**
     * Send table data via email using Azure Communication Services
     */
    public String sendTableDataEmail(DataExportRequest request, ExportData data) {
        log.info("Preparing to send email to: {}", request.getRecipientEmail());

        // Build email content
        String htmlContent = buildHtmlTable(data);
        String subject = request.getSubject() != null && !request.getSubject().isEmpty() 
            ? request.getSubject() 
            : "Data Export: " + data.getTableName();

        // Build email message
        EmailMessage emailMessage = new EmailMessage()
            .setSenderAddress(senderAddress)
            .setSubject(subject)
            .setBodyHtml(htmlContent);

        // Add recipients
        List<EmailAddress> toRecipients = new ArrayList<>();
        toRecipients.add(new EmailAddress(request.getRecipientEmail()));
        
        // Add CC recipients if provided
        if (request.getCcEmails() != null && !request.getCcEmails().isEmpty()) {
            for (String ccEmail : request.getCcEmails()) {
                toRecipients.add(new EmailAddress(ccEmail));
            }
        }

        emailMessage.setToRecipients(toRecipients);

        try {
            // Send email
            log.info("Sending email via Azure Communication Services...");
            SyncPoller<EmailSendResult, EmailSendResult> poller = emailClient.beginSend(emailMessage);
            
            PollResponse<EmailSendResult> response = poller.waitForCompletion(Duration.ofSeconds(60));
            EmailSendResult result = response.getValue();
            
            String messageId = result.getId();
            log.info("Email sent successfully. Message ID: {}", messageId);
            log.info("Email status: {}", result.getStatus());

            return messageId;
        } catch (Exception e) {
            log.error("Failed to send email", e);
            throw new RuntimeException("Failed to send email: " + e.getMessage(), e);
        }
    }

    /**
     * Build HTML table from export data
     */
    private String buildHtmlTable(ExportData data) {
        StringBuilder html = new StringBuilder();
        
        html.append("<!DOCTYPE html>");
        html.append("<html><head>");
        html.append("<style>");
        html.append("body { font-family: Arial, sans-serif; margin: 20px; }");
        html.append("h2 { color: #333; }");
        html.append("table { border-collapse: collapse; width: 100%; margin-top: 20px; }");
        html.append("th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }");
        html.append("th { background-color: #0078d4; color: white; font-weight: bold; }");
        html.append("tr:nth-child(even) { background-color: #f2f2f2; }");
        html.append("tr:hover { background-color: #e6f3ff; }");
        html.append(".summary { color: #666; margin-top: 10px; }");
        html.append("</style>");
        html.append("</head><body>");
        
        html.append("<h2>Data Export: ").append(escapeHtml(data.getTableName())).append("</h2>");
        html.append("<p class='summary'>Total rows: ").append(data.getTotalRows()).append("</p>");
        
        html.append("<table>");
        
        // Header row
        html.append("<tr>");
        for (String column : data.getColumnNames()) {
            html.append("<th>").append(escapeHtml(column)).append("</th>");
        }
        html.append("</tr>");
        
        // Data rows
        for (Map<String, Object> row : data.getRows()) {
            html.append("<tr>");
            for (String column : data.getColumnNames()) {
                Object value = row.get(column);
                String cellValue = value != null ? value.toString() : "";
                html.append("<td>").append(escapeHtml(cellValue)).append("</td>");
            }
            html.append("</tr>");
        }
        
        html.append("</table>");
        html.append("<p class='summary'>Generated by Spring Export Email Application</p>");
        html.append("</body></html>");
        
        return html.toString();
    }

    /**
     * Escape HTML special characters
     */
    private String escapeHtml(String input) {
        if (input == null) return "";
        return input.replace("&", "&amp;")
                   .replace("<", "&lt;")
                   .replace(">", "&gt;")
                   .replace("\"", "&quot;")
                   .replace("'", "&#39;");
    }
}
